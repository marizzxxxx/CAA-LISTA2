5)


1. Primeiro algoritmo:
Este algoritmo utiliza dois laços aninhados, onde o laço interno é executado n vezes para cada iteração do laço externo. Portanto, o custo total do algoritmo é n * n = n^2.


2. Segundo algoritmo:
Neste caso, o algoritmo possui laços aninhados, com o laço interno executando n iterações para cada passo do laço externo, porém o número total de iterações do laço externo é limitado por log2(n). Assim, o custo total do algoritmo é n * log2(n) = n log2(n).


3. Terceiro algoritmo:
Esse algoritmo apresenta laços aninhados, onde o número de iterações do laço interno é n/i para cada iteração do laço externo, sendo i o valor da variável na iteração atual. Portanto, o custo total do algoritmo é representado pela soma de n * (n/1) + n * (n/2) + n * (n/4) + ..., resultando em uma complexidade de 2n^2/3.


8) 


Melhor
	O(n)
	O(n)
	O(1)
	O(1)
	Médio
	O(n²)
	O(n²)
	O(n³)
	O(n³)
	Pior
	O(n²)
	O(n)
	O(n³)
	O(n³)
	

9)


1. Primeira função:
Complexidade: O(nlogn)
Explicação: A recursão é realizada em frações do tamanho inicial, aproximadamente um terço a cada iteração, e a recursão continua até que o tamanho seja maior que 1.


2. Segunda função:
Complexidade: O(logn)
Explicação: A recursão ocorre com um fator de redução de aproximadamente 3/5 do tamanho original a cada iteração, e a recursão continua até que o tamanho seja igual ou menor que 1.


3. Terceira função:
Complexidade: O(logn)
Explicação: A recursão é feita com uma redução de cerca de 2/3 do tamanho inicial a cada iteração, e a recursão continua até que o tamanho seja igual ou menor que 1.


4. Enigma:
Complexidade: O(nlogn)
Explicação: Emprega o algoritmo de Quicksort, utilizando a estratégia de divisão e conquista para resolver os dois enigmas.